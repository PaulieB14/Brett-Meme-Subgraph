type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExcludeFromFees @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isExcluded: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExcludeFromLimits @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  isExcluded: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetAutomatedMarketMakerPair @entity(immutable: true) {
  id: Bytes!
  pair: Bytes! # address
  value: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapAndLiquify @entity(immutable: true) {
  id: Bytes!
  tokensSwapped: BigInt! # uint256
  ethReceived: BigInt! # uint256
  tokensIntoLiquidity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensAirdropped @entity(immutable: true) {
  id: Bytes!
  totalWallets: BigInt! # uint256
  totalTokens: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type developmentWalletUpdated @entity(immutable: true) {
  id: Bytes!
  newWallet: Bytes! # address
  oldWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type liquidityWalletUpdated @entity(immutable: true) {
  id: Bytes!
  newWallet: Bytes! # address
  oldWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type marketingWalletUpdated @entity(immutable: true) {
  id: Bytes!
  newWallet: Bytes! # address
  oldWallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAnalytics @entity {
  id: ID!                        # A fixed ID for global analytics (e.g., "analytics")
  totalTransfers: BigInt!        # Total number of transfer events
  totalAirdropped: BigInt!       # Total tokens airdropped
  uniqueHolders: Int!            # Number of unique holders
  totalSupply: BigInt!           # Current total supply
  totalLiquidityAdded: BigInt!   # Total tokens added to liquidity
  totalBurned: BigInt!           # Total tokens burned (if applicable)
  blockTimestamp: BigInt!        # Last update time
}

type Holder @entity {
  id: Bytes!                     # Wallet address
  balance: BigInt!               # Current token balance
  totalReceived: BigInt!         # Total tokens received
  totalSent: BigInt!             # Total tokens sent
  transactionCount: Int!         # Number of transactions involving this holder
}

type GlobalSettings @entity {
  id: ID!                        # A fixed ID for global settings (e.g., "settings")
  buyFees: BigInt!               # Current buy fees
  sellFees: BigInt!              # Current sell fees
  maxTransaction: BigInt!        # Maximum transaction limit
  maxWallet: BigInt!             # Maximum wallet holding limit
  tradingActive: Boolean!        # Whether trading is active
  swapEnabled: Boolean!          # Whether swapping is enabled
  blockTimestamp: BigInt!        # Last update time
}
ÃŸ